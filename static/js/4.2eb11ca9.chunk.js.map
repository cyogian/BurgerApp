{"version":3,"sources":["components/UI/Input/Input.module.css","containers/Auth/Auth.module.css","containers/Auth/Auth.js","components/UI/Input/Input.js"],"names":["module","exports","Auth","state","controls","email","elementType","elementConfig","type","placeholder","value","validation","required","isEmail","valid","touched","password","minLength","isSignUp","inputChangedHandler","e","controlName","updatedControls","updateObject","target","checkValidity","setState","submitHandler","preventDefault","props","onAuth","switchAuthModeHandler","prevState","this","buildingBurger","authRedirectPath","onSetAuthRedirectPath","formElementsArray","key","push","name","invalid","changed","errorMessage","error","style","color","backgroundColor","borderRadius","border","padding","message","className","classes","isAuthenticated","to","loading","onSubmit","btnType","clicked","Component","connect","auth","token","builder","building","dispatch","authActions","Input","inputElement","inputClasses","InputElement","Invalid","join","onChange","options","map","option","displayValue","Label","label"],"mappings":"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","file":"static/js/4.2eb11ca9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__3r5Ke\",\"Label\":\"Input_Label__1qyHr\",\"InputElement\":\"Input_InputElement__2m88K\",\"Invalid\":\"Input_Invalid__16Mis\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth_Auth__1Zul_\"};","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Redirect } from \"react-router-dom\";\n\nimport Spinner from \"../../components/UI/Spinner/Spinner\";\nimport Input from \"../../components/UI/Input/Input\";\nimport Button from \"../../components/UI/Button/Button\";\nimport * as authActions from \"../../store/actions/authActions\";\nimport { updateObject, checkValidity } from \"../../shared/utility\";\n\nimport classes from \"./Auth.module.css\";\n\nclass Auth extends Component {\n  state = {\n    controls: {\n      email: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"email\",\n          placeholder: \"E-Mail\"\n        },\n        value: \"\",\n        validation: {\n          required: true,\n          isEmail: true\n        },\n        valid: false,\n        touched: false\n      },\n      password: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"password\",\n          placeholder: \"Password\"\n        },\n        value: \"\",\n        validation: {\n          required: true,\n          minLength: 6\n        },\n        valid: false,\n        touched: false\n      }\n    },\n    isSignUp: true\n  };\n\n  componentDidMount() {\n    if (!this.props.buildingBurger && this.props.authRedirectPath !== \"/\") {\n      this.props.onSetAuthRedirectPath();\n    }\n  }\n\n  inputChangedHandler = (e, controlName) => {\n    const updatedControls = updateObject(this.state.controls, {\n      [controlName]: updateObject(this.state.controls[controlName], {\n        value: e.target.value,\n        valid: checkValidity(\n          e.target.value,\n          this.state.controls[controlName].validation\n        ),\n        touched: true\n      })\n    });\n\n    this.setState({\n      controls: updatedControls\n    });\n  };\n\n  submitHandler = e => {\n    e.preventDefault();\n    this.props.onAuth(\n      this.state.controls.email.value,\n      this.state.controls.password.value,\n      this.state.isSignUp\n    );\n  };\n\n  switchAuthModeHandler = () => {\n    this.setState(prevState => {\n      return {\n        isSignUp: !prevState.isSignUp\n      };\n    });\n  };\n\n  render() {\n    const formElementsArray = [];\n    for (let key in this.state.controls) {\n      formElementsArray.push(\n        <Input\n          key={key}\n          elementType={this.state.controls[key].elementType}\n          elementConfig={this.state.controls[key].elementConfig}\n          value={this.state.controls[key].value}\n          name={key}\n          invalid={!this.state.controls[key].valid}\n          touched={this.state.controls[key].touched}\n          changed={e => this.inputChangedHandler(e, key)}\n        />\n      );\n    }\n\n    let errorMessage = null;\n    if (this.props.error) {\n      errorMessage = (\n        <p\n          style={{\n            color: \"red\",\n            backgroundColor: \"pink\",\n            borderRadius: \"5px\",\n            border: \"2px solid red\",\n            padding: \"5px\"\n          }}\n        >\n          {this.props.error.message}\n        </p>\n      );\n    }\n    return (\n      <div className={classes.Auth}>\n        {this.props.isAuthenticated ? (\n          <Redirect to={this.props.authRedirectPath} />\n        ) : null}\n        <h2>{this.state.isSignUp ? \"SIGN UP\" : \"SIGN IN\"}</h2>\n        {errorMessage}\n        {this.props.loading ? (\n          <Spinner />\n        ) : (\n          <form onSubmit={this.submitHandler}>\n            {formElementsArray}\n            <Button btnType=\"Success\">SUBMIT</Button>\n          </form>\n        )}\n        <Button btnType=\"Danger\" clicked={this.switchAuthModeHandler}>\n          SWITCH TO {this.state.isSignUp ? \"SIGN IN\" : \"SIGN UP\"}\n        </Button>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    loading: state.auth.loading,\n    error: state.auth.error,\n    isAuthenticated: state.auth.token !== null,\n    buildingBurger: state.builder.building,\n    authRedirectPath: state.auth.authRedirectPath\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onAuth: (email, password, isSignUp) =>\n      dispatch(authActions.auth(email, password, isSignUp)),\n    onSetAuthRedirectPath: () => dispatch(authActions.setAuthRedirectPath(\"/\"))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);\n","import React from \"react\";\nimport classes from \"./Input.module.css\";\n\nconst Input = props => {\n  let inputElement = null;\n  let inputClasses = [classes.InputElement];\n  if (props.touched && props.invalid) inputClasses.push(classes.Invalid);\n  switch (props.elementType) {\n    case \"input\":\n      inputElement = (\n        <input\n          className={inputClasses.join(\" \")}\n          {...props.elementConfig}\n          value={props.value}\n          onChange={props.changed}\n          name={props.name}\n        />\n      );\n      break;\n    case \"textarea\":\n      inputElement = (\n        <textarea\n          className={inputClasses.join(\" \")}\n          {...props}\n          onChange={props.changed}\n        />\n      );\n      break;\n\n    case \"select\":\n      inputElement = (\n        <select\n          className={inputClasses.join(\" \")}\n          value={props.value}\n          onChange={props.changed}\n          name={props.name}\n        >\n          {props.elementConfig.options.map(option => (\n            <option key={option.value} value={option.value}>\n              {option.displayValue}\n            </option>\n          ))}\n        </select>\n      );\n      break;\n    default:\n      inputElement = (\n        <input\n          className={inputClasses.join(\" \")}\n          {...props.elementConfig}\n          value={props.value}\n          name={props.name}\n        />\n      );\n  }\n  return (\n    <div className={classes.Input}>\n      <label className={classes.Label}>{props.label}</label>\n      {inputElement}\n    </div>\n  );\n};\n\nexport default Input;\n"],"sourceRoot":""}
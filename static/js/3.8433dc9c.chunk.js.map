{"version":3,"sources":["components/UI/Input/Input.module.css","components/Order/CheckoutSummary/CheckoutSummary.module.css","containers/Checkout/ContactData/ContactData.module.css","components/Order/CheckoutSummary/CheckoutSummary.js","containers/Checkout/ContactData/ContactData.js","containers/Checkout/Checkout.js","components/UI/Input/Input.js"],"names":["module","exports","CheckoutSummary","props","className","classes","style","width","margin","Burger","ingredients","price","toFixed","Button","btnType","clicked","checkoutCancelled","checkoutContinued","ContactData","state","orderForm","name","elementType","elementConfig","type","placeholder","value","validation","required","valid","touched","email","isEmail","street","zipCode","minLength","maxLength","country","deliveryMethod","options","displayValue","formIsValid","inputChangedHandler","event","inputId","updatedFormElement","updateObject","target","checkValidity","updatedOrderForm","setState","orderHandler","preventDefault","formData","formElementId","order","orderData","userId","onStartPurchase","token","formElementsArray","key","push","Input","invalid","changed","e","this","form","onSubmit","disabled","loading","Spinner","Component","connect","builder","totalPrice","auth","dispatch","orderActions","withErrorHandler","axios","Checkout","checkoutCancelledHandler","history","goBack","checkoutContinuedHandler","replace","to","purchasedRedirect","purchased","path","match","component","inputElement","inputClasses","InputElement","Invalid","join","onChange","map","option","Label","label"],"mappings":"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","file":"static/js/3.8433dc9c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__3r5Ke\",\"Label\":\"Input_Label__1qyHr\",\"InputElement\":\"Input_InputElement__2m88K\",\"Invalid\":\"Input_Invalid__16Mis\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CheckoutSummary\":\"CheckoutSummary_CheckoutSummary__3PsXi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactData\":\"ContactData_ContactData__20AK_\"};","import React from \"react\";\nimport Burger from \"../../Burger/Burger\";\nimport Button from \"../../../components/UI/Button/Button\";\n\nimport classes from \"./CheckoutSummary.module.css\";\n\nconst CheckoutSummary = props => {\n  return (\n    <div className={classes.CheckoutSummary}>\n      <h1>We hope it tastes well!</h1>\n      <div\n        style={{\n          width: \"100%\",\n          margin: \"auto\"\n        }}\n      >\n        <Burger ingredients={props.ingredients} />\n        <p>\n          <strong>Total Price: ${props.price.toFixed(2)}</strong>\n        </p>\n      </div>\n      <Button btnType=\"Danger\" clicked={props.checkoutCancelled}>\n        Cancel\n      </Button>\n      <Button btnType=\"Success\" clicked={props.checkoutContinued}>\n        Continue\n      </Button>\n    </div>\n  );\n};\n\nexport default CheckoutSummary;\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport Button from \"../../../components/UI/Button/Button\";\nimport Spinner from \"../../../components/UI/Spinner/Spinner\";\nimport Input from \"../../../components/UI/Input/Input\";\nimport * as orderActions from \"../../../store/actions/orderActions\";\nimport axios from \"../../../axios-orders\";\nimport withErrorHandler from \"../../../hoc/withErrorHandler/withErrorHandler\";\nimport { updateObject, checkValidity } from \"../../../shared/utility\";\n\nimport classes from \"./ContactData.module.css\";\n\nclass ContactData extends Component {\n  state = {\n    orderForm: {\n      name: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"text\",\n          placeholder: \"Your Name\"\n        },\n        value: \"\",\n        validation: {\n          required: true\n        },\n        valid: false,\n        touched: false\n      },\n      email: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"email\",\n          placeholder: \"Your Mail\"\n        },\n        value: \"\",\n        validation: {\n          required: true,\n          isEmail: true\n        },\n        valid: false,\n        touched: false\n      },\n      street: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"text\",\n          placeholder: \"Street\"\n        },\n        value: \"\",\n        validation: {\n          required: true\n        },\n        valid: false,\n        touched: false\n      },\n      zipCode: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"text\",\n          placeholder: \"ZIP Code\"\n        },\n        value: \"\",\n        validation: {\n          required: true,\n          minLength: 4,\n          maxLength: 6\n        },\n        valid: false,\n        touched: false\n      },\n      country: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"text\",\n          placeholder: \"Country\"\n        },\n        value: \"\",\n        validation: {\n          required: true\n        },\n        valid: false,\n        touched: false\n      },\n      deliveryMethod: {\n        elementType: \"select\",\n        elementConfig: {\n          options: [\n            { value: \"cheapest\", displayValue: \"Cheapest\" },\n            { value: \"fastest\", displayValue: \"Fastest\" }\n          ]\n        },\n        validation: {},\n        value: \"cheapest\",\n        valid: true,\n        touched: true\n      }\n    },\n    formIsValid: false\n  };\n\n  inputChangedHandler = (event, inputId) => {\n    const updatedFormElement = updateObject(this.state.orderForm[inputId], {\n      value: event.target.value,\n      touched: true,\n      valid: checkValidity(\n        event.target.value,\n        this.state.orderForm[inputId].validation\n      )\n    });\n    const updatedOrderForm = updateObject(this.state.orderForm, {\n      [inputId]: updatedFormElement\n    });\n    let formIsValid = true;\n    for (let inputId in updatedOrderForm) {\n      formIsValid = updatedOrderForm[inputId].valid && formIsValid;\n    }\n    updatedOrderForm[inputId] = updatedFormElement;\n    this.setState({ orderForm: updatedOrderForm, formIsValid });\n  };\n  orderHandler = event => {\n    event.preventDefault();\n    const formData = {};\n    for (let formElementId in this.state.orderForm) {\n      formData[formElementId] = this.state.orderForm[formElementId].value;\n    }\n    const order = {\n      ingredients: this.props.ingredients,\n      price: this.props.price,\n      orderData: formData,\n      userId: this.props.userId\n    };\n    this.props.onStartPurchase(order, this.props.token);\n  };\n\n  render() {\n    const formElementsArray = [];\n    for (let key in this.state.orderForm) {\n      formElementsArray.push(\n        <Input\n          key={key}\n          elementType={this.state.orderForm[key].elementType}\n          elementConfig={this.state.orderForm[key].elementConfig}\n          value={this.state.orderForm[key].value}\n          name={key}\n          invalid={!this.state.orderForm[key].valid}\n          touched={this.state.orderForm[key].touched}\n          changed={e => this.inputChangedHandler(e, key)}\n        />\n      );\n    }\n    let form = (\n      <form onSubmit={this.orderHandler}>\n        {formElementsArray}\n        <Button btnType=\"Success\" disabled={!this.state.formIsValid}>\n          ORDER\n        </Button>\n      </form>\n    );\n    if (this.props.loading) {\n      form = <Spinner />;\n    }\n    return (\n      <div className={classes.ContactData}>\n        <h4>Enter your Contact Data</h4>\n        {form}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    ingredients: state.builder.ingredients,\n    price: state.builder.totalPrice,\n    loading: state.order.loading,\n    token: state.auth.token,\n    userId: state.auth.userId\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onStartPurchase: (orderData, token) =>\n      dispatch(orderActions.purchaseBurger(orderData, token))\n  };\n};\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(withErrorHandler(ContactData, axios));\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport CheckoutSummary from \"../../components/Order/CheckoutSummary/CheckoutSummary\";\nimport { Route, Redirect } from \"react-router-dom\";\nimport ContactData from \"./ContactData/ContactData\";\n\nclass Checkout extends Component {\n  checkoutCancelledHandler = () => {\n    this.props.history.goBack();\n  };\n\n  checkoutContinuedHandler = () => {\n    this.props.history.replace(\"/checkout/contact-data\");\n  };\n\n  render() {\n    if (!this.props.ingredients) {\n      return <Redirect to=\"/\" />;\n    }\n    const purchasedRedirect = this.props.purchased ? <Redirect to=\"/\" /> : null;\n    return (\n      <div>\n        {purchasedRedirect}\n        <CheckoutSummary\n          ingredients={this.props.ingredients}\n          price={this.props.totalPrice}\n          checkoutCancelled={this.checkoutCancelledHandler}\n          checkoutContinued={this.checkoutContinuedHandler}\n        />\n\n        <Route\n          path={this.props.match.path + \"/contact-data\"}\n          component={ContactData}\n        />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    ingredients: state.builder.ingredients,\n    totalPrice: state.builder.totalPrice,\n    purchased: state.order.purchased\n  };\n};\n\nexport default connect(mapStateToProps)(Checkout);\n","import React from \"react\";\nimport classes from \"./Input.module.css\";\n\nconst Input = props => {\n  let inputElement = null;\n  let inputClasses = [classes.InputElement];\n  if (props.touched && props.invalid) inputClasses.push(classes.Invalid);\n  switch (props.elementType) {\n    case \"input\":\n      inputElement = (\n        <input\n          className={inputClasses.join(\" \")}\n          {...props.elementConfig}\n          value={props.value}\n          onChange={props.changed}\n          name={props.name}\n        />\n      );\n      break;\n    case \"textarea\":\n      inputElement = (\n        <textarea\n          className={inputClasses.join(\" \")}\n          {...props}\n          onChange={props.changed}\n        />\n      );\n      break;\n\n    case \"select\":\n      inputElement = (\n        <select\n          className={inputClasses.join(\" \")}\n          value={props.value}\n          onChange={props.changed}\n          name={props.name}\n        >\n          {props.elementConfig.options.map(option => (\n            <option key={option.value} value={option.value}>\n              {option.displayValue}\n            </option>\n          ))}\n        </select>\n      );\n      break;\n    default:\n      inputElement = (\n        <input\n          className={inputClasses.join(\" \")}\n          {...props.elementConfig}\n          value={props.value}\n          name={props.name}\n        />\n      );\n  }\n  return (\n    <div className={classes.Input}>\n      <label className={classes.Label}>{props.label}</label>\n      {inputElement}\n    </div>\n  );\n};\n\nexport default Input;\n"],"sourceRoot":""}